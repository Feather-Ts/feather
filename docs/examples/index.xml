<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Examples on Feather TS</title>
    <link>/examples/</link>
    <description>Recent content in Examples on Feather TS</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 03 Apr 2016 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/examples/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Examples</title>
      <link>/examples/</link>
      <pubDate>Sun, 03 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>/examples/</guid>
      <description>Routing Routing is simply done by having one page container component with a bunch of @Route() decorated methods and one single-item array binding for the pages to show. Now from within the routing methods replace the array item with a new page.
myPages: Page[] = [] @Route(&#39;/login&#39;) onPath(params) { this.myPage.splice(0, 1, new LoginPage()) } @Route(&#39;/project/:id&#39;) onPath(params) { const project = await this.fetchProject(params.id) this.myPage.splice(0, 1, new ProjectPage(project)) }  Swapping components This can be also achieved by swapping elements in an array</description>
    </item>
    
  </channel>
</rss>